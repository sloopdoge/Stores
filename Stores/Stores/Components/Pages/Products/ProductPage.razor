@page "/product"
@page "/product/{id:int}"
@inject ICategoryService CategoryService
@inject IProductService ProductService
@inject ISubCategoryService SubCategoryService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Product</PageTitle>

@if (Id is null)
{
    <h1>Create new product</h1>
}
else
{
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <h1>Edit product</h1>
        <button class="btn btn-primary" style="font-size: 18px; padding: 10px;" @onclick="(() => CreateProduct())">
            Create new product
        </button>
    </div>
    <h3>@product.ProductTitle</h3>
}

<ModalDialog @ref="@ModalDialog" Title="@modalText">
    <div class="modal-footer">
        <button class="btn btn-primary" @onclick="(() => CloseDialogAndNavigate())">OK</button>
    </div>
</ModalDialog>

<EditForm Model="product" OnSubmit="HandleSubmit" FormName="productForm">
    <div>
        <label for="categoryDropdown">Category</label>
        <InputSelect id="categoryDropdown" @bind-Value="product.CategoryID">
            <option value="@product.Category.CategoryID">@product.Category.CategoryTitle</option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryID">@category.CategoryTitle</option>
            }
        </InputSelect>
        <label for="subCategoryDropdown">Sub Category</label>
        <InputSelect id="subCategoryDropdown" @bind-Value="product.SubCategoryID">
            <option value="@product.SubCategory.SubCategoryID">@product.SubCategory.SubCategoryTitle</option>
            @foreach (var subCategory in subCategories)
            {
                <option value="@subCategory.SubCategoryID">@subCategory.SubCategoryTitle</option>
            }
        </InputSelect>
        <label for="productTitle">Product Title</label>
        <InputText id="productTitle" @bind-Value="product.ProductTitle" class="form-control" />
        <label for="taxGroup">Tax Group</label>
        <InputNumber id="taxGroup" @bind-Value="product.TaxGroup"/>
        <label for="isMature">Is Mature?</label>
        <InputCheckbox id="isMature" @bind-Value="product.IsMature"/>
        <label for="exciseNeeded">Is Mature?</label>
        <InputCheckbox id="exciseNeeded" @bind-Value="product.ExciseNeeded" />
    </div>
    <button type="submit" style="font-size: 16px; padding: 10px;" class="btn btn-primary">@btnText</button>
    @if (Id is not null)
    {
        <button class="btn btn-danger" style="font-size: 16px; padding: 10px;" @onclick="(() => DeleteProduct((int)Id))">
            Delete
        </button>
    }
</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    ModalDialog ModalDialog { get; set; }

    string modalText = String.Empty;

    List<Category> categories = null;
    List<SubCategory> subCategories = null;

    [SupplyParameterFromForm]
    Stores.Entities.Product product { get; set; } = new Stores.Entities.Product();
    string uri = "/products";

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save" : "Edit";

        var categoryServiceTask = CategoryService.GetCategories();
        var subCategoryServiceTask = SubCategoryService.GetSubCategories();

        await Task.WhenAll(categoryServiceTask, subCategoryServiceTask);

        categories = categoryServiceTask.Result;
        subCategories = subCategoryServiceTask.Result;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await ProductService.GetProductById((int)Id);

            if (result is not null)
            {
                product = result;

            }
            else
            {
                NavigationManager.NavigateTo("/products");
            }
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            string message = "Product created.";

            var result = await ProductService.CreateProduct(product);

            uri = $"/product/{result.ProductID}";
            ShowModalDialog(message);
        }
        else
        {
            string message = "Product edited.";

            var result = await ProductService.EditProduct((int)Id, product);

            uri = $"/product/{(int)Id}";
            ShowModalDialog(message);
        }
    }

    async Task DeleteProduct(int id)
    {
        uri = "/products";

        string modalSuccessText = "Product successfully deleted";
        string modalErrorText = "Error occured while deleting product";

        var result = await ProductService.DeleteProduct(id);
        if (result)
        {
            ShowModalDialog(result, modalSuccessText);
        }
        else
            ShowModalDialog(result, modalErrorText);
    }

    void ShowModalDialog(bool isSuccess, string text)
    {
        if (isSuccess) modalText = text;
        else modalText = text;

        ModalDialog.Open();
    }

    void ShowModalDialog(string text)
    {
        modalText = text;

        ModalDialog.Open();
    }

    void CloseDialogAndNavigate()
    {
        ModalDialog.Close();
        NavigationManager.NavigateTo(uri);
    }

    void CreateProduct()
    {
        NavigationManager.NavigateTo("/product");
    }
}